#include <bits/stdc++.h>
#include<vector>
#include<algorithm>
using namespace std;

int factors(int n)
{
    if(n>3){
	    for (int i = 2; i <= sqrt(n); i++){
	        if(n % (i*i) == 0){
	            return 1;
	        }
	    }
    }
	return 0;
}

void subsetsUtil(vector<int>& A, vector<vector<int> >& res, vector<int>& subset, int index)
{
    res.push_back(subset);
    for (int i = index; i < A.size(); i++) {
        subset.push_back(A[i]);
        subsetsUtil(A, res, subset, i + 1);
        subset.pop_back();
    }
    return;
}
int subsets(vector<int>& A)
{
    vector<int> subset;
    vector<vector<int> > res;
    int index = 0, temp=1;
    subsetsUtil(A, res, subset, index);
    vector<int> product;
    cout<<res.size()<<endl;
    for (int i = 0; i < res.size(); i++) {
        for (int j = 0; j < res[i].size(); j++)
            cout << res[i][j] << " ";
        cout << endl;
    }
    cout<<endl<<endl;
    for (int i = 0; i < res.size(); i++) {
        for (int j = 0; j < res[i].size(); j++){
            temp*=res[i][j];
        }
        product.push_back(temp);
        cout<<product[i]<<" ";
        temp=1;
    }
    int count=0;
    for(int i=0;i<product.size();i++){
        if(factors(product[i])==0) count++;
    }
    return count-1;
}

int main(){
    vector<int> arr={4,2,3,15};
    for(int i=0;i<arr.size();i++){
        if(factors(arr[i])==1){
            arr.erase(remove(arr.begin(), arr.end(), arr[i]), arr.end());
            //arr[i]=0;
        }
        //else arr[i]=1;
    }
    int count = subsets(arr);
    cout<<endl<<endl<<count;
    return 0;
}
